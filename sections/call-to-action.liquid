<section class="call-to-action">
  <div class="container">
    <!-- Section Title -->
    <h1>{{ section.settings.section_title }}</h1>

    <!-- Dynamic Collection Title -->
    <h2>{{ collection.title | capitalize }} is now available!</h2>

    <!-- Additional Information -->
    <p>{{ section.settings.additional_info }}</p>

    <!-- Products List -->
    <div id="product-list"></div> <!-- Aquí se mostrarán los productos -->
  </div>
</section>



<script>

    
    function addToCart(variantId, quantity) {
        console.log(`Ejecutando addToCart con variantId: ${variantId}, quantity: ${quantity}`);
    
        if (!variantId || quantity <= 0) {
            console.error('Error: ID de variante o cantidad inválida.');
            return;
        }
    
        // Agregar producto al carrito
        fetch('/cart/add.js', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id: variantId,
                quantity: quantity,
            }),
        })
            .then(response => {
                console.log('Respuesta del API /cart/add.js:', response);
                if (!response.ok) {
                    return response.json().then(error => {
                        console.error('Error al agregar producto al carrito:', error);
                        throw new Error(`Error ${response.status}: ${JSON.stringify(error)}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Producto agregado al carrito correctamente:', data);
    
                // Solicitar las secciones actualizadas, incluyendo los precios y los productos
                return fetch('/cart?sections=cart-drawer,cart-icon-bubble,cart-items,cart-total-price');
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al obtener las secciones del carrito.');
                }
                return response.json();
            })
            .then(sections => {
                console.log('Secciones actualizadas del carrito:', sections);
    
                // Actualizar el contenido del cart drawer
                const cartDrawer = document.querySelector('cart-drawer');
                if (cartDrawer && typeof cartDrawer.renderContents === 'function') {
                    cartDrawer.renderContents({ sections });
                } else {
                    console.warn('El elemento <cart-drawer> no se encontró o no tiene renderContents.');
    
                    // Actualizar manualmente el contenido del carrito
                    const cartDrawerSection = document.querySelector('#shopify-section-cart-drawer');
                    if (cartDrawerSection) {
                        cartDrawerSection.innerHTML = sections['cart-drawer'];
                    } else {
                        console.error('No se encontró la sección #shopify-section-cart-drawer en el DOM.');
                    }
                }
    
                // Actualizar ícono del carrito
                const cartIconBubble = document.querySelector('#cart-icon-bubble');
                if (cartIconBubble) {
                    cartIconBubble.innerHTML = sections['cart-icon-bubble'];
                }
    
                // Actualizar productos y precios si hay secciones específicas para ellos
                const cartItemsContainer = document.querySelector('#cart-items');
                if (cartItemsContainer) {
                    cartItemsContainer.innerHTML = sections['cart-items'];
                }
    
                const cartTotalPriceContainer = document.querySelector('#cart-total-price');
                if (cartTotalPriceContainer) {
                    cartTotalPriceContainer.innerHTML = sections['cart-total-price'];
                }
    
                // Verificar el estado del carrito (vacío o no vacío)
                checkCartEmptyStatus();
            })
            .catch(error => {
                console.error('Error al agregar al carrito:', error.message);
            });
    }
    
    function checkCartEmptyStatus() {
        fetch('/cart.js')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al obtener el estado del carrito.');
                }
                return response.json();
            })
            .then(cartData => {
                console.log('Datos del carrito:', cartData);
    
                const isEmpty = cartData.item_count === 0;
                console.log(`Estado del carrito: ${isEmpty ? 'Vacío' : 'No vacío'}`);
    
                // Actualizar UI en función del estado del carrito
                const cartIconBubble = document.querySelector('#cart-icon-bubble');
                if (cartIconBubble) {
                    cartIconBubble.classList.toggle('is-empty', isEmpty);
                }
    
                const cartDrawer = document.querySelector('cart-drawer');
                if (cartDrawer) {
                    cartDrawer.classList.toggle('is-empty', isEmpty);
                }
            })
            .catch(error => {
                console.error('Error al verificar el estado del carrito:', error.message);
            });
    }
    

// Función para cargar productos dinámicamente
function loadProducts() {
    console.log('Ejecutando loadProducts...');
    const productList = document.getElementById('product-list');

    if (!productList) {
        console.error('Error: Elemento #product-list no encontrado.');
        return;
    }

    fetch('/collections/{{ collection.handle }}/products.json')
        .then(response => {
            console.log('Respuesta del API /collections/...:', response);
            if (!response.ok) {
                throw new Error(`Error ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Productos cargados desde la API:', data);

            const products = data.products;
            productList.innerHTML = ''; // Limpiar la lista anterior

            products.forEach(product => {
                const productItem = document.createElement('div');
                productItem.classList.add('product-item');

                const productImage = product.images.length > 0 ? product.images[0].src : 'default-image.jpg';
                const variant = product.variants[0];

                productItem.innerHTML = `
                    <img src="${productImage}" alt="${product.title}" class="product-image" />
                    <h3>${product.title}</h3>
                    <p>${product.body_html}</p>
                    <p><strong>Price:</strong> $${variant.price / 100} USD</p>
                    <button class="add-to-cart" data-variant-id="${variant.id}">Add to Cart</button>
                `;

                productList.appendChild(productItem);
            });

            console.log('Productos renderizados correctamente en el DOM.');

            // Asignar eventos a los botones "Add to Cart"
            const buttons = document.querySelectorAll('.add-to-cart');
            buttons.forEach(button => {
                button.addEventListener('click', function () {
                    const variantId = this.getAttribute('data-variant-id');
                    console.log(`Botón "Add to Cart" pulsado. Variant ID: ${variantId}`);
                    addToCart(variantId, 1); // Cantidad fija de 1
                });
            });
        })
        .catch(error => {
            console.error('Error al cargar productos:', error.message);
        });
}

// Ejecutar la carga de productos al cargar la página
document.addEventListener('DOMContentLoaded', loadProducts);


</script>

<style>
  .call-to-action {
    text-align: center;
    padding: 2rem;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
  }
  .call-to-action h1, .call-to-action h2 {
    color: #333;
  }
  .call-to-action p {
    color: #555;
    font-size: 1rem;
  }

  #product-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    padding: 20px;
  }

  .product-item {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .product-item img {
    width: 100%;
    max-width: 250px;
    height: auto;
    margin-bottom: 15px;
    border-radius: 8px;
  }

  .product-item h3 {
    font-size: 1.2em;
    margin: 10px 0;
  }


</style>

{% schema %}
{
  "name": "Call to Action",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Welcome to Our Seasonal Collection"
    },
    {
      "type": "textarea",
      "id": "additional_info",
      "label": "Additional Information",
      "default": "Pre-order now to secure your favorite items before they sell out!"
    }
  ]
}
{% endschema %}
